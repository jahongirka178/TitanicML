import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
import category_encoders as ce
import plotly.express as px

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title='üö¢ Titanic Classifier', layout='wide')
st.title("üö¢ –î–∞—Ç–∞—Å–µ—Ç Titanic - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã–∂–∏–≤–∞–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞")
st.write('## –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ ML-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Titanic')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
url = "https://raw.githubusercontent.com/jahongirka178/TitanicML/refs/heads/master/data/titanic_for_hw.csv"
df = pd.read_csv(url)


# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
st.subheader('üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö')

col1, col2 = st.columns(2)

with col1:
    fig1 = px.histogram(df, x='Survived', color='Sex', barmode='group',
                        title='–í—ã–∂–∏–≤–∞–Ω–∏–µ –ø–æ –ø–æ–ª—É', labels={'Survived': '–í—ã–∂–∏–ª'})
    st.plotly_chart(fig1, use_container_width=True)

with col2:
    fig2 = px.scatter(df, x='Age', y='Fare', color=df['Survived'].map({0: '–ù–µ –≤—ã–∂–∏–ª', 1: '–í—ã–∂–∏–ª'}),
                      title='–í–æ–∑—Ä–∞—Å—Ç vs –¢–∞—Ä–∏—Ñ', labels={'Fare': '–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞', 'Age': '–í–æ–∑—Ä–∞—Å—Ç'})
    st.plotly_chart(fig2, use_container_width=True)

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ü–µ–ª–∏
X = df.drop(columns='Survived')
y = df['Survived']

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
encoder = ce.TargetEncoder(cols=['Sex', 'Embarked'])
X_encoded = encoder.fit_transform(X, y)

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/test
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.3, random_state=42)

# –ú–æ–¥–µ–ª–∏
models = {
    'Decision Tree': DecisionTreeClassifier(random_state=42),
    'KNN': KNeighborsClassifier(n_neighbors=5)
}

results = []
for name, model in models.items():
    model.fit(X_train, y_train)
    acc_train = accuracy_score(y_train, model.predict(X_train))
    acc_test = accuracy_score(y_test, model.predict(X_test))
    results.append({
        'Model': name,
        'Train Accuracy': round(acc_train, 2),
        'Test Accuracy': round(acc_test, 2)
    })

st.subheader('üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π')
st.table(pd.DataFrame(results))

# –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.header('üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')
pclass = st.sidebar.selectbox('–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞ (Pclass)', sorted(df['Pclass'].unique()))
sex = st.sidebar.selectbox('–ü–æ–ª (Sex)', df['Sex'].unique())
age = st.sidebar.slider('–í–æ–∑—Ä–∞—Å—Ç (Age)', 0, 80, 30)
sibsp = st.sidebar.number_input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞—Ç—å–µ–≤/—Å–µ—Å—Ç—ë—Ä –∏–ª–∏ —Å—É–ø—Ä—É–≥–æ–≤ (SibSp)', 0, 10, 0)
parch = st.sidebar.number_input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π/–¥–µ—Ç–µ–π (Parch)', 0, 10, 0)
fare = st.sidebar.slider('–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ (Fare)', 0.0, 600.0, 50.0)
embarked = st.sidebar.selectbox('–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏ (Embarked)', df['Embarked'].unique())

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_input = pd.DataFrame([{
    'Pclass': pclass,
    'Sex': sex,
    'Age': age,
    'SibSp': sibsp,
    'Parch': parch,
    'Fare': fare,
    'Embarked': embarked
}])

user_encoded = encoder.transform(user_input)

st.subheader('–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
st.dataframe(user_input)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
st.sidebar.subheader("üìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

if st.sidebar.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
    user_encoded = encoder.transform(user_input)

    for name, model in models.items():
        pred = model.predict(user_encoded)[0]
        proba = model.predict_proba(user_encoded)[0]

        st.sidebar.markdown(f"**{name}: {'‚úÖ –í—ã–∂–∏–ª' if pred == 1 else '‚ùå –ù–µ –≤—ã–∂–∏–ª'}**")
        proba_df = pd.DataFrame({'–ö–ª–∞—Å—Å': ['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'], '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': proba})
        st.sidebar.dataframe(proba_df.set_index("–ö–ª–∞—Å—Å"), use_container_width=True)
else:
    st.sidebar.markdown("‚¨ÖÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.")