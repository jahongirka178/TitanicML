import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
import category_encoders as ce
import plotly.express as px

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title='üö¢ Titanic Classifier', layout='wide')
st.title("üö¢ –î–∞—Ç–∞—Å–µ—Ç Titanic - –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
st.header('–†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º Titanic')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
url = "https://raw.githubusercontent.com/jahongirka178/TitanicML/refs/heads/master/data/titanic_for_hw.csv"
df = pd.read_csv(url)

# –¢–∞–±–ª–∏—Ü–∞
st.subheader('–î–∞–Ω–Ω—ã–µ')
st.dataframe(df.round(2), use_container_width=True)


# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
st.write('## –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è')
col1, col2 = st.columns(2)

with col1:
    fig1 = px.histogram(df, x='Survived', color='Sex', barmode='group', title='–í—ã–∂–∏–≤—à–∏–µ –ø–æ –ø–æ–ª—É')
    st.plotly_chart(fig1, use_container_width=True)
with col2:
    fig2 = px.box(df, x='Pclass', y='Age', color='Survived', title='–í–æ–∑—Ä–∞—Å—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º –∏ –≤—ã–∂–∏–≤–∞–Ω–∏—é')
    st.plotly_chart(fig2, use_container_width=True)



# –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
X = df.drop(columns=['Survived', 'Name', 'Cabin'])
y = df['Survived']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

encoder = ce.TargetEncoder(cols=['Sex', 'Embarked', 'Title', 'FareCategory', 'AgeGroup'])
X_train_encoded = encoder.fit_transform(X_train, y_train)
X_test_encoded = encoder.transform(X_test)

models = {
    'Decision Tree': DecisionTreeClassifier(random_state=42),
    'KNN': KNeighborsClassifier(4),
}

results = []
for name, model in models.items():
    model.fit(X_train_encoded, y_train)
    acc_train = accuracy_score(y_train, model.predict(X_train_encoded))
    acc_test = accuracy_score(y_test, model.predict(X_test_encoded))
    results.append({
        'Model': name,
        'Train Accuracy': round(acc_train, 2),
        'Test Accuracy': round(acc_test, 2)
    })

st.write('## –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏')
st.table(pd.DataFrame(results))

# Sidebar –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
st.sidebar.header('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º')

sex_input = st.sidebar.selectbox('–ü–æ–ª', df['Sex'].unique())
embarked_input = st.sidebar.selectbox('–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏', df['Embarked'].unique())
title_input = st.sidebar.selectbox('–û–±—Ä–∞—â–µ–Ω–∏–µ', df['Title'].unique())
fare_cat_input = st.sidebar.selectbox('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–∞—Ä–∏—Ñ–∞', df['FareCategory'].unique())
age_group_input = st.sidebar.selectbox('–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞', df['AgeGroup'].unique())

pclass = st.sidebar.selectbox('–ö–ª–∞—Å—Å –±–∏–ª–µ—Ç–∞', sorted(df['Pclass'].unique()))
age = st.sidebar.slider('–í–æ–∑—Ä–∞—Å—Ç', float(df['Age'].min()), float(df['Age'].max()), float((df['Age'].min()+df['Age'].max())/2))
fare = st.sidebar.slider('–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞', float(df['Fare'].min()), float(df['Fare'].max()), float((df['Fare'].min()+df['Fare'].max())/2))
family_size = st.sidebar.slider('–†–∞–∑–º–µ—Ä —Å–µ–º—å–∏', 0, int(df['family_size'].max()), 1)
is_alone = int(family_size == 0)

user_input = pd.DataFrame([{
    'Pclass': pclass,
    'Sex': sex_input,
    'Age': age,
    'Fare': fare,
    'Embarked': embarked_input,
    'Title': title_input,
    'FareCategory': fare_cat_input,
    'family_size': family_size,
    'is_alone': is_alone,
    'AgeGroup': age_group_input
}])

user_encoded = encoder.transform(user_input)

for col in ['Pclass', 'Age', 'Fare', 'family_size', 'is_alone']:
    user_encoded[col] = user_input[col].values

user_encoded = user_encoded[X_train_encoded.columns]

st.dataframe(user_input, use_container_width=True)

st.sidebar.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
for name, model in models.items():
    pred = model.predict(user_encoded)[0]
    proba = model.predict_proba(user_encoded)[0]
    st.sidebar.markdown(f"**{name}: {'–í—ã–∂–∏–ª' if pred == 1 else '–ù–µ –≤—ã–∂–∏–ª'}**")
    proba_df = pd.DataFrame({'–ö–ª–∞—Å—Å': ['–ù–µ –≤—ã–∂–∏–ª', '–í—ã–∂–∏–ª'], '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': proba})
    st.sidebar.dataframe(proba_df.set_index("–ö–ª–∞—Å—Å"), use_container_width=True)
